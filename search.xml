<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2020/10/21/docker/</url>
    <content><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>系统版本：Ubuntu20.04<br>官方文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<ol>
<li><p>卸载旧版本(如没有则跳过)<br><code>sudo apt-get remove docker docker-engine docker.io containerd runc </code></p>
</li>
<li><p>更新apt并下载相关包  </p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg-agent \</span><br><span class="line">software-properties-common</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>添加Docker官方GPG key<br><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code>  </p>
</li>
<li><p>验证你拥有了key<br><code>sudo apt-key fingerprint 0EBFCD88</code></p>
</li>
</ol>
<blockquote>
<p>pub   rsa4096 2017-02-22 [SCEA]<br>    9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid                 [ unknown] Docker Release (CE deb) <a href="mailto:&#x64;&#111;&#99;&#x6b;&#101;&#x72;&#x40;&#100;&#x6f;&#99;&#107;&#x65;&#x72;&#46;&#x63;&#x6f;&#x6d;">&#x64;&#111;&#99;&#x6b;&#101;&#x72;&#x40;&#100;&#x6f;&#99;&#107;&#x65;&#x72;&#46;&#x63;&#x6f;&#x6d;</a><br>sub   rsa4096 2017-02-22 [S]    </p>
</blockquote>
<ol start="5">
<li>使用以下命令设置稳定存储库。(这里为x86_64/amd64)   </li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line"><span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>安装最新版Docker   </li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可指定版本  </p>
</blockquote>
<p><code>apt-cache madison docker-ce  </code>   </p>
<blockquote>
<p>docker-ce | 5:18.09.1<del>3-0</del>ubuntu-xenial | <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 5:18.09.0<del>3-0</del>ubuntu-xenial | <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.1<del>ce</del>3-0<del>ubuntu       | <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.0</del>ce<del>3-0</del>ubuntu       | <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  …    </p>
</blockquote>
<p><code>sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p>
<blockquote>
<p>例如<br><code>sudo apt-get install docker-ce=&lt;5:18.09.1~3-0~ubuntu-xenial&gt; docker-ce-cli=&lt;5:18.09.1~3-0~ubuntu-xenial&gt; containerd.io</code>     </p>
</blockquote>
<ol start="7">
<li><p>通过运行hello-world映像，验证Docker引擎已正确安装。<br><code>sudo docker run hello-world</code><br><img src="https://s1.ax1x.com/2020/10/21/BPN3VS.png" alt="hello-world">  </p>
</li>
<li><p>设置开机自启<br><code>sudo systemctl enable docker</code><br>关闭开机自启<br><code>sudo systemctl disable docker</code>   </p>
</li>
<li><p>查看Docker运行情况<br><code>sudo systemctl status docker</code>    </p>
<h1 id="Docker的中央仓库"><a href="#Docker的中央仓库" class="headerlink" title="Docker的中央仓库"></a>Docker的中央仓库</h1></li>
<li><p>Docker的官方仓库  </p>
<blockquote>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a>   </p>
</blockquote>
</li>
<li><p>国内镜像仓库  </p>
</li>
</ol>
<ul>
<li><p>网易蜂巢  </p>
<blockquote>
<p><a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a>   </p>
</blockquote>
</li>
<li><p>daocloud   </p>
<blockquote>
<p><a href="https://hub.daocloud.io/">https://hub.daocloud.io/</a>   </p>
</blockquote>
</li>
</ul>
<h1 id="镜像的操作"><a href="#镜像的操作" class="headerlink" title="镜像的操作"></a>镜像的操作</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p><code>docker pull 镜像名称[:tag]</code>  </p>
<blockquote>
<p>tag表示具体版本(可写可不写)   </p>
</blockquote>
<p>拉取tomcat环境(daocloud)<br><code>docker pull daocloud.io/library/tomcat:8.5.15-jre8 </code><br><img src="https://s1.ax1x.com/2020/10/21/BPdzdK.png" alt="地址"></p>
<h2 id="查看本地全部的镜像"><a href="#查看本地全部的镜像" class="headerlink" title="查看本地全部的镜像"></a>查看本地全部的镜像</h2><p><code>docker images</code><br><img src="https://s1.ax1x.com/2020/10/21/BPwRYD.png" alt="全部镜像"></p>
<h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p><code>docker rmi [IMAGE ID]</code>   </p>
<h2 id="镜像的导入导出"><a href="#镜像的导入导出" class="headerlink" title="镜像的导入导出"></a>镜像的导入导出</h2><ul>
<li>导出<br><code>docker save -o [src] [IMAGE ID]</code>  </li>
<li>加载<br><code>docker load -i [镜像文件]</code> </li>
<li>修改镜像名称<br><code>docker tag [IMAGE ID] [名称:版本]</code>   <h1 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h1><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2></li>
<li>简单语法<br><code>docker run [IMAGE ID]|[镜像名称[:tag]]</code>   </li>
<li>常用语法<br><code>docker run -d -p 宿主机端口:容器端口 --name 容器名称 [IMAGE ID]|[镜像名称[:tag]]</code>   <blockquote>
<p>-d: 后台运行容器  </p>
</blockquote>
</li>
</ul>
<p>-p: 宿主机端口:容器端口  :映射当前Linux的端口和容器的端口<br>–name  容器名称： 指定容器的名称  </p>
<ul>
<li><p>运行已有容器<br><code>docker start [container_ID]</code>   </p>
</li>
<li><p>例如<br><code>docker run -dit -p 8080:8080 --name tomcat b8</code>   </p>
<h2 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h2><p><code>docker ps [-q|-a]</code></p>
<blockquote>
<p>-a: 查看全部容器，包括没有运行的容器   </p>
</blockquote>
</li>
</ul>
<p>-q:  只查看容器的标识(IMAGE ID)</p>
<h2 id="查看容器的日志"><a href="#查看容器的日志" class="headerlink" title="查看容器的日志"></a>查看容器的日志</h2><p><code>docker logs -f [IMAGE ID]</code>   </p>
<blockquote>
<p>-f: 可以滚动日志的最后几行    </p>
</blockquote>
<h2 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h2><p>`docker exec -it [container_ID] /bin/bash    </p>
<h2 id="停止和删除容器-删除容器前需要先停止容器"><a href="#停止和删除容器-删除容器前需要先停止容器" class="headerlink" title="停止和删除容器(删除容器前需要先停止容器)"></a>停止和删除容器(删除容器前需要先停止容器)</h2><ul>
<li>停止指定的容器<br><code>docker stop [container_ID]</code>  </li>
<li>停止所用容器<br><code>docker stop $(docker ps -qa)</code></li>
<li>删除指定的容器<br><code>docker rm [container_ID]</code>   </li>
<li>删除所有容器<br><code>docker rm $(docker ps -qa)</code>    </li>
</ul>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p><code>docker start [container_ID]</code>   </p>
<h1 id="应用Docker-以golang环境为例"><a href="#应用Docker-以golang环境为例" class="headerlink" title="应用Docker(以golang环境为例)"></a>应用Docker(以golang环境为例)</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>docker pull golang</code>  </p>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p><code>docker images</code><br><img src="https://s1.ax1x.com/2020/10/22/BkMl26.png">  </p>
<h3 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h3><p><code>docker run -dit -name golang 4a</code><br><img src="https://s1.ax1x.com/2020/10/22/BkMvz6.png"><br>输入<code>docker ps</code>发现容器已经运行   </p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p><code>docker exec -it 88 /bin/bash</code><br>输入<code>go version</code>发现环境已成功运行<br><img src="https://s1.ax1x.com/2020/10/22/BkQO0g.png">   </p>
<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p> <code>exit</code>  </p>
<h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p> <code>docker stop 88</code>   </p>
<h2 id="使用环境-运行hello-go"><a href="#使用环境-运行hello-go" class="headerlink" title="使用环境(运行hello.go)"></a>使用环境(运行hello.go)</h2><h3 id="在VsCode中配置环境"><a href="#在VsCode中配置环境" class="headerlink" title="在VsCode中配置环境"></a>在VsCode中配置环境</h3><p> 在VsCode中添加以下扩展  </p>
<ul>
<li><p>GO  </p>
</li>
<li><p>Docker  </p>
</li>
<li><p>Docker WorkSpace  </p>
<h3 id="设置Docker试之可以在非root用户下运行"><a href="#设置Docker试之可以在非root用户下运行" class="headerlink" title="设置Docker试之可以在非root用户下运行"></a>设置Docker试之可以在非root用户下运行</h3><ul>
<li>添加docker用户组<br><code>sudo groupadd docker</code>  </li>
<li>将登陆用户加入到docker用户组中<br><code>sudo gpasswd -a $USER docker</code>    </li>
<li>更新用户组<br><code>newgrp docker</code>    </li>
<li>重启系统即可<br><img src="https://s1.ax1x.com/2020/10/23/BECJsI.png">   <h3 id="运行容器-2"><a href="#运行容器-2" class="headerlink" title="运行容器"></a>运行容器</h3><code>docker start 88</code>   </li>
</ul>
<h3 id="将容器添加到VsCode工作区"><a href="#将容器添加到VsCode工作区" class="headerlink" title="将容器添加到VsCode工作区"></a>将容器添加到VsCode工作区</h3></li>
<li><p>打开VcCode按[F1] 输入<code> dockerws: Add Folder to Workspace</code>。接下来，选择docker容器，下一步， 选择要打开的文件夹路径即可。  </p>
</li>
<li><p>打开VsCode资源管理器，发现go已经添加到工作区<br><img src="https://s1.ax1x.com/2020/10/23/BEC0Jg.png">    </p>
<h3 id="新建hello-go文件，写入测试代码"><a href="#新建hello-go文件，写入测试代码" class="headerlink" title="新建hello.go文件，写入测试代码"></a>新建hello.go文件，写入测试代码</h3><p>新建hello.go文件，并写入以下代码，保存。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">pakage main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行hello-go"><a href="#运行hello-go" class="headerlink" title="运行hello.go"></a>运行hello.go</h3></li>
<li><p>打开VsCode终端  </p>
</li>
<li><p>输入<code>docker exec -it 88 /bin/bash</code>进入容器   </p>
</li>
<li><p>输入<code>go run hello.go</code> </p>
</li>
<li><p>发现输出 hello world 说明hello.go运行成功<br><img src="https://s1.ax1x.com/2020/10/23/BEC6Lq.png"></p>
</li>
</ul>
<h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><p><code>docker volume create [数据卷名称]</code>  </p>
<blockquote>
<p>默认路径 /var/lib/docker/volumes/数据卷名称<br>数据卷中的具体内容存放在：    /var/lib/docker/volumes/数据卷名称/_data   </p>
</blockquote>
<h2 id="查看数据卷的详细信息"><a href="#查看数据卷的详细信息" class="headerlink" title="查看数据卷的详细信息"></a>查看数据卷的详细信息</h2><ul>
<li>查看指定的数据卷<br><code>docker volume inspect [数据卷名称]</code>   </li>
<li>查看全部数据卷<br><code>docker volume ls</code>  </li>
</ul>
<h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><p><code>docker volume rm [数据卷名称]</code>   </p>
<h2 id="应用数据卷"><a href="#应用数据卷" class="headerlink" title="应用数据卷"></a>应用数据卷</h2><ul>
<li>当映射数据卷时，若数据卷不存在，Docker会帮你创建<br><code>docker run -v [数据卷名称:容器内部的路径]</code>    </li>
<li>直接指定一个路径作为数据卷的存放位置<br><code>docker run -v [路径:容器内部的路径]</code></li>
</ul>
<hr>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="运行docker-rmi-IMAGE-ID-报错"><a href="#运行docker-rmi-IMAGE-ID-报错" class="headerlink" title="运行docker rmi [IMAGE ID]报错"></a>运行<code>docker rmi [IMAGE ID]</code>报错</h2><ol>
<li>错误1<br><code>unable to delete b8dfe9ade316 (must be forced) - image is referenced in multiple repositories</code><br>错误原因：查看镜像发现，同一个IMAGE ID被多个REPOSITORY引用<br><img src="https://s1.ax1x.com/2020/10/22/BkiIKI.png"><br>解决方法<br><code>docker rmi tomcat:8.5</code><br>再次运行<code>docker rmi [IMAGE ID]</code>即可   </li>
<li>错误2<br><code>unable to delete b8dfe9ade316 (must be forced) - image is being used by stopped container fef1a1b37057</code><br>错误原因：即要删除的该镜像,被容器fef1a1b37057所引用了<br>解决方法  </li>
</ol>
<ul>
<li>执行<code>docker ps -a</code>查看所有容器记录（包括未运行的容器），并查看那些容器是使用了这个要删除的镜像    </li>
<li>执行命令<code>docker rm container_ID</code>删除这个容器   </li>
<li>再次运行<code>docker rmi [IMAGE ID]</code>即可   </li>
</ul>
]]></content>
      <categories>
        <category>项目开发基础</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习</title>
    <url>/2020/10/21/deeplearning/</url>
    <content><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>计算机视觉  </p>
<blockquote>
<p>CNN:卷积神经网络    </p>
</blockquote>
<p>序列数据，如音频(一维时间序列)  </p>
<blockquote>
<p>RNN:循环神经网络<br>RNNS：更复杂的循环神经网络  </p>
</blockquote>
<p><img src="https://s1.ax1x.com/2020/10/21/BCFxwF.png" alt="样例图"><br>结构化数据与非结构化数据<br><img src="https://s1.ax1x.com/2020/10/21/BCkbAe.png" alt="结构化数据与非结构化数据 "></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>一个丑陋的3D小人</title>
    <url>/2020/08/31/three-js-learn/</url>
    <content><![CDATA[<h1 id="一个丑陋的3D小人"><a href="#一个丑陋的3D小人" class="headerlink" title="一个丑陋的3D小人"></a>一个丑陋的3D小人</h1><p>第一次接触three.js，技术还十分辣鸡🤣，一通复制粘贴改参数，终于画出来一个丑陋的3D小人，具体代码如下。<br>想要运行此代码，要引入three.js文件，<a href="https://github.com/mrdoob/three.js">three.js文件下载地址</a>。</p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://s1.ax1x.com/2020/09/05/wVrY1U.png" alt="正视图" title="正视图"><br><img src="https://s1.ax1x.com/2020/09/05/wVranJ.png" alt="左视图" title="左视图"><br><img src="https://s1.ax1x.com/2020/09/05/wVrBA1.png" alt="俯视图" title="俯视图"></p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;一个丑陋的<span class="number">3</span>D小人&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">      <span class="comment">/* 隐藏body窗口区域滚动条 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!--引入three.js三维引擎--&gt;</span><br><span class="line">    &lt;!--将这里的文件路径改为你的文件路径--&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;./three.js/build/three.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;./three.js/examples/js/controls/OrbitControls.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建场景对象Scene</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建网格模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//腿</span></span><br><span class="line"><span class="keyword">var</span> geometry1 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">20</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material1 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x0000ff</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh1 = <span class="keyword">new</span> THREE.Mesh(geometry1, material1); <span class="comment">//网格模型对象Mesh</span></span><br><span class="line">mesh1.position.set(<span class="number">0</span>,<span class="number">-150</span>,<span class="number">45</span>)</span><br><span class="line">scene.add(mesh1); <span class="comment">//网格模型添加到场景中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头</span></span><br><span class="line"><span class="keyword">var</span> geometry2 = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">60</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">var</span> material2 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0xff00ff</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mesh2 = <span class="keyword">new</span> THREE.Mesh(geometry2, material2); </span><br><span class="line">mesh2.translateY(<span class="number">160</span>); </span><br><span class="line">scene.add(mesh2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 身体</span></span><br><span class="line"><span class="keyword">var</span> geometry3 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">60</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material3 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0xffff00</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mesh3 = <span class="keyword">new</span> THREE.Mesh(geometry3, material3); </span><br><span class="line"><span class="comment">// mesh3.translateX(120); </span></span><br><span class="line">mesh3.position.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">scene.add(mesh3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//腿</span></span><br><span class="line"><span class="keyword">var</span> geometry4 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">20</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material4 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x0000ff</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh4 = <span class="keyword">new</span> THREE.Mesh(geometry4, material4); </span><br><span class="line">mesh4.position.set(<span class="number">0</span>,<span class="number">-150</span>,<span class="number">-45</span>);</span><br><span class="line">scene.add(mesh4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//胳膊</span></span><br><span class="line"><span class="keyword">var</span> geometry5 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">20</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material5 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x0000ff</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh5 = <span class="keyword">new</span> THREE.Mesh(geometry5, material5); </span><br><span class="line">mesh5.rotateX(<span class="built_in">Math</span>.PI / <span class="number">4</span>);</span><br><span class="line">mesh5.position.set(<span class="number">0</span>,<span class="number">20</span>,<span class="number">-90</span>);</span><br><span class="line">scene.add(mesh5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//胳膊</span></span><br><span class="line"><span class="keyword">var</span> geometry6 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">20</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material6 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x0000ff</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh6 = <span class="keyword">new</span> THREE.Mesh(geometry6, material6); </span><br><span class="line">mesh6.rotateX(<span class="built_in">Math</span>.PI / <span class="number">-4</span>);</span><br><span class="line">mesh6.position.set(<span class="number">0</span>,<span class="number">20</span>,<span class="number">90</span>);</span><br><span class="line">scene.add(mesh6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//眼睛</span></span><br><span class="line"><span class="keyword">var</span> geometry7 = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">10</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">var</span> material7 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0xCC3366</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mesh7 = <span class="keyword">new</span> THREE.Mesh(geometry7, material7); </span><br><span class="line">mesh7.position.set(<span class="number">40</span>,<span class="number">180</span>,<span class="number">30</span>);</span><br><span class="line">scene.add(mesh7);</span><br><span class="line"></span><br><span class="line"><span class="comment">//眼睛</span></span><br><span class="line"><span class="keyword">var</span> geometry8 = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">10</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">var</span> material8 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0xCC3366</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mesh8 = <span class="keyword">new</span> THREE.Mesh(geometry8, material8); </span><br><span class="line">mesh8.position.set(<span class="number">40</span>,<span class="number">180</span>,<span class="number">-30</span>); </span><br><span class="line">scene.add(mesh8);</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼻子</span></span><br><span class="line"><span class="keyword">var</span> geometry9 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">10</span>, <span class="number">2.5</span>, <span class="number">50</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material9 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x9999FF</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh9 = <span class="keyword">new</span> THREE.Mesh(geometry9, material9); </span><br><span class="line">mesh9.rotateZ(<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">mesh9.position.set(<span class="number">60</span>,<span class="number">165</span>,<span class="number">0</span>);</span><br><span class="line">scene.add(mesh9);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下均为头发</span></span><br><span class="line"><span class="keyword">var</span> geometry10 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material10 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x99FF00</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh10 = <span class="keyword">new</span> THREE.Mesh(geometry10, material10); </span><br><span class="line">mesh10.position.set(<span class="number">0</span>,<span class="number">240</span>,<span class="number">0</span>);</span><br><span class="line">scene.add(mesh10);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geometry11 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material11 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x99FF00</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh11 = <span class="keyword">new</span> THREE.Mesh(geometry10, material10); </span><br><span class="line">mesh11.position.set(<span class="number">0</span>,<span class="number">240</span>,<span class="number">0</span>);</span><br><span class="line">scene.add(mesh11);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geometry12 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material12 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x99FF00</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh12 = <span class="keyword">new</span> THREE.Mesh(geometry12, material12);</span><br><span class="line">mesh12.rotateX(<span class="built_in">Math</span>.PI / <span class="number">-3</span>);</span><br><span class="line">mesh12.position.set(<span class="number">0</span>,<span class="number">210</span>,<span class="number">-40</span>);</span><br><span class="line">scene.add(mesh12);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geometry13 = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> material13 = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0x99FF00</span></span><br><span class="line">&#125;); <span class="comment">//材质对象Material</span></span><br><span class="line"><span class="keyword">var</span> mesh13 = <span class="keyword">new</span> THREE.Mesh(geometry13, material13); </span><br><span class="line">mesh13.rotateX(<span class="built_in">Math</span>.PI / <span class="number">3</span>);</span><br><span class="line">mesh13.position.set(<span class="number">0</span>,<span class="number">210</span>,<span class="number">40</span>);</span><br><span class="line">scene.add(mesh13);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 光源设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//辅助坐标系</span></span><br><span class="line">    <span class="keyword">var</span> axisHelper = <span class="keyword">new</span> THREE.AxisHelper(<span class="number">250</span>);</span><br><span class="line">    scene.add(axisHelper);</span><br><span class="line">    <span class="comment">//点光源</span></span><br><span class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>);</span><br><span class="line">    point.position.set(<span class="number">400</span>, <span class="number">200</span>, <span class="number">300</span>); <span class="comment">//点光源位置</span></span><br><span class="line">    scene.add(point); <span class="comment">//点光源添加到场景中</span></span><br><span class="line">    <span class="comment">//环境光</span></span><br><span class="line">    <span class="keyword">var</span> ambient = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0x444444</span>);</span><br><span class="line">    scene.add(ambient);</span><br><span class="line">    <span class="comment">// console.log(scene)</span></span><br><span class="line">    <span class="comment">// console.log(scene.children)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相机设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth; <span class="comment">//窗口宽度</span></span><br><span class="line">    <span class="keyword">var</span> height = <span class="built_in">window</span>.innerHeight; <span class="comment">//窗口高度</span></span><br><span class="line">    <span class="keyword">var</span> k = width / height; <span class="comment">//窗口宽高比</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">200</span>; <span class="comment">//三维场景显示范围控制系数，系数越大，显示的范围越大</span></span><br><span class="line">    <span class="comment">//创建相机对象</span></span><br><span class="line">    <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(-s * k, s * k, s, -s, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    camera.position.set(<span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>); <span class="comment">//设置相机位置</span></span><br><span class="line">    camera.lookAt(scene.position); <span class="comment">//设置相机方向(指向的场景对象)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建渲染器对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">    renderer.setSize(width, height);<span class="comment">//设置渲染区域尺寸</span></span><br><span class="line">    renderer.setClearColor(<span class="number">0xb9d3ff</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(renderer.domElement); <span class="comment">//body元素中插入canvas对象</span></span><br><span class="line">    <span class="comment">//执行渲染操作   指定场景、相机作为参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    renderer.render(scene,camera);<span class="comment">//执行渲染操作</span></span><br><span class="line">  &#125;</span><br><span class="line">  render();</span><br><span class="line">  <span class="keyword">var</span> controls = <span class="keyword">new</span> THREE.OrbitControls(camera,renderer.domElement);<span class="comment">//创建控件对象</span></span><br><span class="line">  controls.addEventListener(<span class="string">&#x27;change&#x27;</span>, render);<span class="comment">//监听鼠标、键盘事件</span></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>three.js学习</tag>
      </tags>
  </entry>
  <entry>
    <title>初探JavaScript</title>
    <url>/2020/09/05/js/</url>
    <content><![CDATA[<h1 id="JavaScript输出"><a href="#JavaScript输出" class="headerlink" title="JavaScript输出"></a>JavaScript输出</h1><p>JavaScript通过下面方式输出数据   </p>
<ul>
<li>使用 window.alert() 弹出警告框。</li>
<li>使用 document.write() 方法将内容写到 HTML 文档中   <blockquote>
<p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。  </p>
</blockquote>
</li>
<li>使用 innerHTML 写入到 HTML 元素。  </li>
<li>使用 console.log() 写入到浏览器的控制台。  <h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;我的第一个javacript&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;我是一个标题&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;我是第一段文字&lt;/p&gt;</span><br><span class="line">&lt;!-- 弹出警告框--&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">window</span>.alert(<span class="string">&quot;error:请刷新页面&quot;</span>)&lt;/script&gt;</span><br><span class="line">&lt;!-- 替换第二段文字--&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;demo&quot;</span>&gt;我是第二段文字,我tm要没了&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML=<span class="string">&quot;我tm是新的第二段文字&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 写入到 HTML 元素。--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">Date</span>())</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;!-- 整个 HTML 页面将被覆盖--&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;clickme()&quot;</span>&gt;点我点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickme</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Date</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 写入到浏览器的控制台--&gt;</span><br><span class="line">&lt;p&gt;使用F12查看&lt;/p&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">&quot;error:请关闭控制台😉🐱‍🏍&quot;</span>)&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript学习</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV学习</title>
    <url>/2020/09/21/opencv/</url>
    <content><![CDATA[<h1 id="读取、显示和保存图片"><a href="#读取、显示和保存图片" class="headerlink" title="读取、显示和保存图片"></a>读取、显示和保存图片</h1><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imread(<span class="string">&#x27;图像名称&#x27;</span>，<span class="string">&#x27;可选参数&#x27;</span>)   </span><br></pre></td></tr></table></figure>
<h3 id="可选参数决定读入图像的模式："><a href="#可选参数决定读入图像的模式：" class="headerlink" title="可选参数决定读入图像的模式："></a>可选参数决定读入图像的模式：</h3><blockquote>
<p>0：读入的为灰度图像（即使图像为彩色的）<br>1：读入的图像为彩色的（默认）</p>
</blockquote>
<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><ol>
<li>使用OpenCV方式显示<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(<span class="string">&#x27;input image&#x27;</span>,src)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li>
<li>使用matplotlib库包中的pyplot子包来显示  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>) <span class="comment">#必须规定为显示的为什么图像</span></span><br><span class="line">plt.xticks([]),plt.yticks([]) <span class="comment">#隐藏坐标线 </span></span><br><span class="line">plt.show() <span class="comment">#显示出来，不要也可以，但是一般都要了</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>opencv的接口使用BGR，而matplotlib.pyplot 则是RGB模式</li>
<li>cv2读入的是BGR模式，在opencv里面存储的是BGR，所以img用opencv输出就是正常颜色</li>
<li>matplotlib.pyplot是RGB模式，当用cv读入，直接用matplotlib.pyplot输出，颜色就变了，所以需要调整颜色的顺序，就变成了img2  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv.imread(<span class="string">&#x27;D:/1.jpg&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">b,g,r = cv.split(img)</span><br><span class="line">img2 = cv.merge([r,g,b])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">&quot;保存路径&quot;</span>, src)  </span><br></pre></td></tr></table></figure>
<h3 id="imwrite的第三个参数"><a href="#imwrite的第三个参数" class="headerlink" title="imwrite的第三个参数"></a>imwrite的第三个参数</h3><ul>
<li>对于JPEG，其表示的是图像的质量，用0-100的整数表示，默认为95。 注意，cv2.IMWRITE_JPEG_QUALITY类型为Long，必须转换成int。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">&quot;保存路径&quot;</span>, src,[int(cv2.IMWRITE_JPEG_QUALITY), <span class="number">5</span>])</span><br></pre></td></tr></table></figure></li>
<li>对于PNG，第三个参数表示的是压缩级别。cv2.IMWRITE_PNG_COMPRESSION，从0到9,压缩级别越高，图像尺寸越小。默认级别为3。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">&quot;保存路径&quot;</span>, src, [int(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">9</span>])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src =cv.imread(<span class="string">&quot;D:/1.jpg&quot;</span>,<span class="number">1</span>) </span><br><span class="line">cv.namedWindow(<span class="string">&quot;input image&quot;</span>,cv.WINDOW_AUTOSIZE)</span><br><span class="line"><span class="comment">#用cv2显示图片</span></span><br><span class="line">cv.imshow(<span class="string">&quot;input image&quot;</span>,src)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line"><span class="comment">#用plt显示图片</span></span><br><span class="line">plt.imshow(src, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">cv.imwrite(<span class="string">&quot;D:/demo.jpg&quot;</span>, src,[int(cv.IMWRITE_JPEG_QUALITY), <span class="number">100</span>])</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="简单图形绘制"><a href="#简单图形绘制" class="headerlink" title="简单图形绘制"></a>简单图形绘制</h1><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<h2 id="线形"><a href="#线形" class="headerlink" title="线形"></a>线形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>), np.uint8)</span><br><span class="line"><span class="comment">#生成一个灰色图像</span></span><br><span class="line">cv.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), <span class="number">255</span>, <span class="number">5</span>)</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()  </span><br><span class="line"> <span class="comment"># 生成一个彩色图像</span></span><br><span class="line">src = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8) </span><br><span class="line">cv.line(src, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">155</span>, <span class="number">55</span>, <span class="number">55</span>), <span class="number">5</span>)</span><br><span class="line">plt.imshow(src, <span class="string">&#x27;brg&#x27;</span>)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure>
<p>说明：</p>
<blockquote>
<p>(0, 0)   起点<br>   (511, 511)   终点<br>    (155, 55, 55)   颜色<br>    5   线宽</p>
</blockquote>
<h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)  </span><br><span class="line">cv.rectangle(img, (<span class="number">20</span>, <span class="number">20</span>), (<span class="number">411</span>, <span class="number">411</span>), (<span class="number">55</span>, <span class="number">255</span>, <span class="number">155</span>), <span class="number">5</span>)</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;brg&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>说明：  </p>
<blockquote>
<p>(20, 20) 顶点<br>  (411, 411)    对角顶点  </p>
</blockquote>
<h2 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)  </span><br><span class="line">cv.circle(img, (<span class="number">200</span>, <span class="number">200</span>), <span class="number">150</span>, (<span class="number">55</span>, <span class="number">255</span>, <span class="number">155</span>), <span class="number">5</span>)  </span><br><span class="line">plt.imshow(img, <span class="string">&#x27;brg&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>说明：   </p>
<blockquote>
<p>(200, 200)   圆心<br>  150   半径</p>
</blockquote>
<h2 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>),np.uint8)<span class="comment">#生成一个空彩色图像</span></span><br><span class="line">cv2.ellipse(img,(<span class="number">256</span>,<span class="number">256</span>),(<span class="number">150</span>,<span class="number">100</span>),<span class="number">30</span>,<span class="number">10</span>,<span class="number">370</span>,(<span class="number">55</span>, <span class="number">255</span>, <span class="number">155</span>), <span class="number">5</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#注意最后一个参数-1，表示对图像进行填充，默认是不填充的，如果去掉，只有椭圆轮廓了</span></span><br><span class="line">plt.imshow(img,<span class="string">&#x27;brg&#x27;</span>)  </span><br></pre></td></tr></table></figure>
<p>说明：  </p>
<blockquote>
<p>(256,256)中心坐标<br>  (150,100)轴长度<br>  30    偏转角度<br>  10  起点角度<br>  370   终点角度</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>OpenCV学习</tag>
      </tags>
  </entry>
</search>
